module.exports.config = {
    name: "checktt", // T√™n l·ªánh, ƒë∆∞·ª£c s·ª≠ d·ª•ng trong vi·ªác g·ªçi l·ªánh
    version: "1.0.1", // phi√™n b·∫£n c·ªßa module n√†y
    hasPermssion: 0, // Quy·ªÅn h·∫°n s·ª≠ d·ª•ng, v·ªõi 0 l√† to√†n b·ªô th√†nh vi√™n, 1 l√† qu·∫£n tr·ªã vi√™n tr·ªü l√™n, 2 l√† admin/owner
    credits: "DungUwU && Nghƒ©a mod th√™m by tpk", // C√¥ng nh·∫≠n module s·ªü h·ªØu l√† ai
    description: "Check t∆∞∆°ng t√°c ng√†y/tu·∫ßn/to√†n b·ªô", // Th√¥ng tin chi ti·∫øt v·ªÅ l·ªánh
    commandCategory: "Qu·∫£n L√≠ Box", // Thu·ªôc v√†o nh√≥m n√†o: system, other, game-sp, game-mp, random-img, edit-img, media, economy, ...
    usages: "< all/week/day/locmem > ", // C√°ch s·ª≠ d·ª•ng l·ªánh
    cooldowns: 5, // Th·ªùi gian m·ªôt ng∆∞·ªùi c√≥ th·ªÉ l·∫∑p l·∫°i l·ªánh
    dependencies: {
        "fs": " ",
        "moment-timezone": " "
    }
};

const path = __dirname + '/tuongtac/checktt/';
const { min } = require('moment-timezone');
const moment = require('moment-timezone');
const { format } = require('path');

module.exports.onLoad = () => {
    const fs = require('fs');
    if (!fs.existsSync(path) || !fs.statSync(path).isDirectory()) {
        fs.mkdirSync(path, { recursive: true });
    }
  setInterval(() => {
    const today = moment.tz("Asia/Ho_Chi_Minh").day();
    const checkttData = fs.readdirSync(path);
        try {
            if (!data || data.length === 0) throw new Error("D·ªØ li·ªáu JSON tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá!");
            let parsedData = JSON.parse(data);
            parsedData.forEach(...); // Ti·∫øp t·ª•c x·ª≠ l√Ω d·ªØ li·ªáu
        } catch (error) {
            console.error("L·ªói khi parse JSON:", error.message);
        }

      if (fileData.time != today) {
        setTimeout(() => {
          fileData = JSON.parse(fs.readFileSync(path + file));
          if (fileData.time != today) {
            fileData.time = today;
            fs.writeFileSync(path + file, JSON.stringify(fileData, null, 4));
          }
        }, 60 * 1000);
      }
    })
  }, 60 * 1000);
}

module.exports.handleEvent = async function ({ api, args, Users, event, Threads, }) {
  const threadInfo = await api.getThreadInfo(event.threadID)
    if (global.client.sending_top == true) return;
    const fs = global.nodemodule['fs'];
    const { threadID, senderID } = event;
    const today = moment.tz("Asia/Ho_Chi_Minh").day();

    if (!fs.existsSync(path + threadID + '.json')) {
        const newObj = {
            total: [],
            week: [],
            day: [],
            time: today
        };
        fs.writeFileSync(path + threadID + '.json', JSON.stringify(newObj, null, 4));
        const threadInfo = await Threads.getInfo(threadID) || {};
        if (threadInfo.hasOwnProperty('isGroup') && threadInfo.isGroup) {
            const UserIDs = threadInfo.participantIDs;
            for (user of UserIDs) {
                if (!newObj.total.find(item => item.id == user)) {
                    newObj.total.push({
                        id: user,
                        count: 0
                    });
                }
                if (!newObj.week.find(item => item.id == user)) {
                    newObj.week.push({
                        id: user,
                        count: 0
                    });
                }
                if (!newObj.day.find(item => item.id == user)) {
                    newObj.day.push({
                        id: user,
                        count: 0
                    });
                }
            }
        }
        fs.writeFileSync(path + threadID + '.json', JSON.stringify(newObj, null, 4));
    }
    const threadData = JSON.parse(fs.readFileSync(path + threadID + '.json'));
    if (threadData.time != today) {
      global.client.sending_top = true;
      setTimeout(() => global.client.sending_top = false, 5 * 60 * 1000);
    }
    const userData_week_index = threadData.week.findIndex(e => e.id == senderID);
    const userData_day_index = threadData.day.findIndex(e => e.id == senderID);
    const userData_total_index = threadData.total.findIndex(e => e.id == senderID);
    if (userData_total_index == -1) {
        threadData.total.push({
            id: senderID,
            count: 1,
        });
    } else threadData.total[userData_total_index].count++;
    if (userData_week_index == -1) {
        threadData.week.push({
            id: senderID,
            count: 1
        });
    } else threadData.week[userData_week_index].count++;
    if (userData_day_index == -1) {
        threadData.day.push({
            id: senderID,
            count: 1
        });
    } else threadData.day[userData_day_index].count++;
    // if (threadData.time != today) {
    //     threadData.day.forEach(e => {
    //         e.count = 0;
    //     });
    //     if (today == 1) {
    //         threadData.week.forEach(e => {
    //             e.count = 0;
    //         });
    //     }
    //     threadData.time = today;
    // }

    fs.writeFileSync(path + threadID + '.json', JSON.stringify(threadData, null, 4));
}

module.exports.run = async function ({ api, event, args, Users, Threads }) {
  let threadInfo = await api.getThreadInfo(event.threadID);
    await new Promise(resolve => setTimeout(resolve, 500));
    const fs = global.nodemodule['fs'];
    const { threadID, messageID, senderID, mentions } = event;
    if (!fs.existsSync(path + threadID + '.json')) {
        return api.sendMessage("ùêÇùê°ùêÆÃõùêö ùêúùê®ÃÅ ùê≠ùê°ùê®ÃÇÃÅùêßùê† ùê§ùêûÃÇ ùêùùêÆÃõÃÉ ùê•ùê¢ùêûÃ£ÃÇùêÆ", threadID);
    }
    const threadData = JSON.parse(fs.readFileSync(path + threadID + '.json'));
    const query = args[0] ? args[0].toLowerCase() : '';

    if(query == 'locmem') {
        let threadInfo = await api.getThreadInfo(threadID);
        if(!threadInfo.adminIDs.some(e => e.id == senderID)) return api.sendMessage("ùêÅùêöÃ£ùêß ùê§ùê°ùê®ÃÇùêßùê† ùêúùê®ÃÅ ùê™ùêÆùê≤ùêûÃÇÃÄùêß ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† ùê•ùêûÃ£ÃÇùêßùê° ùêßùêöÃÄùê≤", threadID);
        if(!threadInfo.isGroup) return api.sendMessage("ùêÇùê°ùê¢Ãâ ùêúùê®ÃÅ ùê≠ùê°ùêûÃÇÃâ ùê¨ùêÆÃõÃâ ùêùùêÆÃ£ùêßùê† ùê≠ùê´ùê®ùêßùê† ùêßùê°ùê®ÃÅùê¶", threadID);
        if(!threadInfo.adminIDs.some(e => e.id == api.getCurrentUserID())) return api.sendMessage("ùêÅùê®ùê≠ ùêúùêöÃÇÃÄùêß ùê™ùê≠ùêØ ùêùùêûÃÇÃâ ùê≠ùê°ùêÆÃõÃ£ùêú ùê°ùê¢ùêûÃ£ÃÇùêß ùê•ùêûÃ£ÃÇùêßùê°", threadID);
        if(!args[1] || isNaN(args[1])) return api.sendMessage("ùêÑùê´ùê´ùê®ùê´...", threadID);
        let minCount = args[1],
            allUser = threadInfo.participantIDs;
        for(let user of allUser) {
            if(user == api.getCurrentUserID()) continue;
            if(!threadData.total.some(e => e.id == user) || threadData.total.find(e => e.id == user).count < minCount) {
                setTimeout(async () => {
                    await api.removeUserFromGroup(user, threadID);
                    for(let e in threadData) {
                        if(e == 'time') continue;
                        if(threadData[e].some(e => e.id == user)) {
                            threadData[e].splice(threadData[e].findIndex(e => e.id == user), 1);
                        }
                    }
                }, 1000);
            }
        }
        return api.sendMessage(`ùêÉùêöÃÉ ùê±ùê®ÃÅùêö ${allUser.length - threadData.total.filter(e => e.count >= minCount).length} ùê≠ùê°ùêöÃÄùêßùê° ùêØùê¢ùêûÃÇùêß ùê§ùê°ùê®ÃÇùêßùê† ùêùùêÆÃâ ${minCount} ùê≠ùê¢ùêß ùêßùê°ùêöÃÜÃÅùêß`, threadID);
    }

    var header = '',
        body = '',
        footer = '',
        msg = '',
        count = 1,
        storage = [],
        data = 0;
    if (query == 'all' || query == '-a') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùóîùóüùóü===\n';
        data = threadData.total;
    } else if (query == 'week' || query == '-w') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùóßùó®ùóîÃÇÃÄùó°===\n';
        data = threadData.week;
    } else if (query == 'day' || query == '-d') {
        header = '===ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ùó°ùóöùóîÃÄùó¨===\n';
        data = threadData.day;
    } else {
        data = threadData.total;
    }
    for (const item of data) {
        const userName = await Users.getNameUser(item.id) || 'T√™n kh√¥ng t·ªìn t·∫°i';
        const itemToPush = item;
        itemToPush.name = userName;
        storage.push(itemToPush);
    };
    let check = ['all', '-a', 'week', '-w', 'day', '-d'].some(e => e == query);
    if (!check && Object.keys(mentions).length > 0) {
        storage = storage.filter(e => mentions.hasOwnProperty(e.id));
    }
    //sort by count from high to low if equal sort by name
    storage.sort((a, b) => {
        if (a.count > b.count) {
            return -1;
        }
        else if (a.count < b.count) {
            return 1;
        } else {
            return a.name.localeCompare(b.name);
        }
    });
    if ((!check && Object.keys(mentions).length == 0) || (!check && Object.keys(mentions).length == 1) || (!check && event.type == 'message_reply')) {
        const UID = event.messageReply ? event.messageReply.senderID : Object.keys(mentions)[0] ? Object.keys(mentions)[0] : senderID;
        const userRank = storage.findIndex(e => e.id == UID);
        const userTotal = threadData.total.find(e => e.id == UID) ? threadData.total.find(e => e.id == UID).count : 0;
        const userTotalWeek = threadData.week.find(e => e.id == UID) ? threadData.week.find(e => e.id == UID).count : 0;
        const userTotalDay = threadData.day.find(e => e.id == UID) ? threadData.day.find(e => e.id == UID).count : 0;
        const nameUID = storage[userRank].name || 'T√™n kh√¥ng t·ªìn t·∫°i';
        const target = UID == senderID ? 'B·∫°n' : nameUID;
      const moment = require("moment-timezone");
  const timeNow = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss");
      var permission;
        if (global.config.ADMINBOT.includes(UID)) permission = `Admin Bot`;
else if
(global.config.NDH.includes(UID)) 
permission = `Ng∆∞·ªùi H·ªó Tr·ª£`; else if (threadInfo.adminIDs.some(i => i.id == UID)) permission = `Qu·∫£n Tr·ªã Vi√™n`; else permission = `Th√†nh Vi√™n`;
      var thu = moment.tz('Asia/Ho_Chi_Minh').format('dddd');
  if (thu == 'Sunday') thu = 'ùêÇùê°ùêÆÃâ ùêçùê°ùêöÃ£ÃÇùê≠'
  if (thu == 'Monday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêáùêöùê¢'
  if (thu == 'Tuesday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêÅùêö'
  if (thu == 'Wednesday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêìùêÆÃõ'
  if (thu == "Thursday") thu = 'ùêìùê°ùêÆÃõÃÅ ùêçùêöÃÜùê¶'
  if (thu == 'Friday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêíùêöÃÅùêÆ'
  if (thu == 'Saturday') thu = 'ùêìùê°ùêÆÃõÃÅ ùêÅùêöÃâùê≤'
      let threadName = threadInfo.threadName;
        if (userRank == -1) {
            return api.sendMessage(`‚Üí ${target} ch∆∞a c√≥ th·ªëng k√™ d·ªØ li·ªáu`, threadID);
        }
        body +=
          `==== [ ùóñùóõùóòùóñùóû ùóßùó®Ãõùó¢Ãõùó°ùóö ùóßùóîÃÅùóñ ] ====\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n[üë§] ‚Üí ùó°ùóÆùó∫ùó≤: ${nameUID}\n[üå∏] ‚Üí ùóúùóó: ${UID}\n[üíì] ‚Üí ùóñùóµùòÇÃõÃÅùó∞ ùòÉùòÇÃ£: ${permission}\n[üî∞] ‚Üí ùóßùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadName}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n[üíå] ‚Üí ùóßùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùòÅùóøùóºùóªùó¥ ùóªùó¥ùóÆÃÄùòÜ: ${userTotalDay}\n[üíì] ‚Üí ùóõùóÆÃ£ùóªùó¥ ùòÅùóøùóºùóªùó¥ ùóªùó¥ùóÆÃÄùòÜ: ${count++}\n[üí¨] ‚Üí ùóßùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùòÅùóøùóºùóªùó¥ ùòÅùòÇùóÆÃÇÃÄùóª: ${userTotalWeek}\n[üß∏] ‚Üí ùóõùóÆÃ£ùóªùó¥ ùòÅùóøùóºùóªùó¥ ùòÅùòÇùóÆÃÇÃÄùóª: ${count++}\n[üìö] ‚Üí ùóßùóºÃÇÃâùóªùó¥ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª: ${userTotal}\n[ü•á] ‚Üí ùóõùóÆÃ£ùóªùó¥ ùòÅùóºÃÇÃâùóªùó¥:  ${userRank + 1}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüíÆ ùó°ùó≤ÃÇÃÅùòÇ ùó∫ùòÇùóºÃÇÃÅùóª ùòÖùó≤ùó∫ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùóªùóµùóºÃÅùó∫ ùóØùóÆÃ£ùóª ùòÅùóµùóÆÃâ ùó∞ùóÆÃâùó∫ ùòÖùòÇÃÅùó∞ "‚ù§" ùòÉùóÆÃÄùóº ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùóªùóÆÃÄùòÜ ùó∞ùòÇÃâùóÆ ùóØùóºùòÅ`.replace(/^ +/gm, '');
    } else {
        body = storage.map(item => {
            return `${count++}. ${item.name} (${item.count})`;
        }).join('\n');
        footer = `‚Üí T·ªïng Tin Nh·∫Øn: ${storage.reduce((a, b) => a + b.count, 0)}`;
    }
  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
    msg = `${header}\n${body}\n${footer}`;
    api.sendMessage({body: msg, attachment: [await streamURL(threadInfo.imageSrc), await streamURL(`
https://graph.facebook.com/${event.senderID}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)]}, threadID, (err, info) => {
    global.client.handleReaction.push({
      name: this.config.name, 
      messageID: info.messageID,
      author: event.senderID,
    })
    },event.messageID);
                     }
module.exports.handleReaction = async ({ event, api, handleReaction, Currencies, Users}) => {
const axios = global.nodemodule["axios"];
const fs = global.nodemodule["fs-extra"];
const { threadID, messageID, userID } = event;
  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`,
    downloader = require('image-downloader'),
    fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j=>fse.unlinkSync(j), 60*1000, dest);
    return fse.createReadStream(dest);
};
  let threadInfo = await api.getThreadInfo(event.threadID);
  let threadName = threadInfo.threadName;
  let id = threadInfo.threadID;
  let sex = threadInfo.approvalMode;
  var pd = sex == false ? 'T·∫Øt' : sex == true ? 'B·∫≠t' : '\n';
  let qtv = threadInfo.adminIDs.length;
let color = threadInfo.color;
  let icon = threadInfo.emoji;
  let threadMem = threadInfo.participantIDs.length;
if (event.userID != handleReaction.author) return;
if (event.reaction != "‚ù§") return; 
 api.unsendMessage(handleReaction.messageID);
        var msg = `=====„Äå ùóßùóõùó¢ÃÇùó°ùóö ùóßùóúùó° ùó°ùóõùó¢ÃÅùó† „Äç=====\n\nüèòÔ∏è ùóßùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadName}\n‚öôÔ∏è ùóúùóó ùóªùóµùóºÃÅùó∫: ${id}\nüë• ùó¶ùóºÃÇÃÅ ùòÅùóµùóÆÃÄùóªùóµ ùòÉùó∂ùó≤ÃÇùóª ùóªùóµùóºÃÅùó∫: ${threadMem}\nüíû ùó§ùòÇùóÆÃâùóª ùòÅùóøùó∂Ã£ ùòÉùó∂ùó≤ÃÇùóª: ${qtv}\nüå∑ ùó£ùóµùó≤ÃÇ ùó±ùòÇùòÜùó≤ÃÇÃ£ùòÅ: ${pd}\nüòª ùóïùó∂ùó≤ÃÇÃâùòÇ ùòÅùòÇÃõùóºÃõÃ£ùóªùó¥ ùó∞ùóÆÃâùó∫ ùòÖùòÇÃÅùó∞: ${icon ? icon : 'Kh√¥ng s·ª≠ d·ª•ng'}\nüíù ùó†ùóÆÃÉ ùó¥ùó∂ùóÆùóº ùó±ùó∂ùó≤ÃÇÃ£ùóª: ${color}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\nüçë ùóßùóºÃÇÃâùóªùó¥ ùòÄùóºÃÇÃÅ ùòÅùó∂ùóª ùóªùóµùóÆÃÜÃÅùóª ùó∞ùòÇÃâùóÆ ùóªùóµùóºÃÅùó∫: ${threadInfo.messageCount}\nüéÄ ùó£ùóµùó∂ÃÅùóÆ ùòÅùóøùó≤ÃÇùóª ùóπùóÆÃÄ ùòÅùóµùóºÃÇùóªùó¥ ùòÅùó∂ùóª ùó∞ùòÇÃâùóÆ ùóªùóµùóºÃÅùó∫ ùóØùóÆÃ£ùóª ùó±ùòÇÃÄùóªùó¥ ùóØùóºùòÖ ùó∂ùóªùó≥ùóº ƒëùó≤ÃÇÃâ ùòÖùó≤ùó∫ ùó∞ùóµùó∂ ùòÅùó∂ùó≤ÃÇÃÅùòÅ `
        return api.sendMessage({body: msg, attachment: await streamURL(threadInfo.imageSrc)},event.threadID,event.messageID);
}